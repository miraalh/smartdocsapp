<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sys_attachment</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>convert image</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var document_record = new GlideRecord(current.table_name);

	if (document_record.get(current.table_sys_id)) {
		if (current.operation() == 'delete') {
			gs.addInfoMessage('Attachment deleted: '+current.file_name+' by ' 
							  +current.sys_created_by+' on '+gs.nowDateTime());
	   }
	}

	else {
	   gs.addInfoMessage('Attachment added: '+current.file_name+' by '
						 +current.sys_created_by);
	}
	
	 try { 
		 var r = new sn_ws.RESTMessageV2('x_221929_smartdocs.Google Cloud Vision request', 'post method');

//override authentication profile 
//authentication type ='basic'/ 'oauth2'
//r.setAuthentication(authentication type, profile name);

//set a MID server name if one wants to run the message on MID
//r.setMIDServer('MY_MID_SERVER');

//if the message is configured to communicate through ECC queue, either
//by setting a MID server or calling executeAsync, one needs to set skip_sensor
//to true. Otherwise, one may get an intermittent error that the response body is null
//r.setEccParameter('skip_sensor', true);

 var response = r.execute();
 var responseBody = response.getBody();
 var httpStatus = response.getStatusCode();
  gs.addInfoMessage(responseBody);

}
catch(ex) {
 var message = ex.getMessage();
	 gs.addInfoMessage(message);
}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-05-29 04:24:49</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>75aa8b2edb921300f37d2fb74896193c</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>convert image</sys_name>
        <sys_overrides/>
        <sys_package display_value="SmartDocs" source="x_221929_smartdocs">639b5661dbd61300f37d2fb748961981</sys_package>
        <sys_policy/>
        <sys_scope display_value="SmartDocs">639b5661dbd61300f37d2fb748961981</sys_scope>
        <sys_update_name>sys_script_75aa8b2edb921300f37d2fb74896193c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-29 06:14:39</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=75aa8b2edb921300f37d2fb74896193c"/>
</record_update>
